/* Copyright (c) 2001, Stanford University
	All rights reserved.

	See the file LICENSE.txt for information on redistributing this software. */
	

/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY server_dispatch_header.py SCRIPT */
#ifndef SERVER_DISPATCH_HEADER
#define SERVER_DISPATCH_HEADER

#ifdef WINDOWS
#define SERVER_DISPATCH_APIENTRY __stdcall
#else
#define SERVER_DISPATCH_APIENTRY
#endif

#include "chromium.h"
#include "state/cr_statetypes.h"

#if defined(__cplusplus)
extern "C" {
#endif


void SERVER_DISPATCH_APIENTRY crServerDispatchActiveStencilFaceEXT(GLenum face);
void SERVER_DISPATCH_APIENTRY crServerDispatchActiveTextureARB(GLenum texture);
void SERVER_DISPATCH_APIENTRY crServerDispatchAlphaFunc(GLenum func, GLclampf ref);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchAreProgramsResidentNV(GLsizei n, const GLuint * ids, GLboolean * residences);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences);
void SERVER_DISPATCH_APIENTRY crServerDispatchAttachShader(GLuint program, GLuint shader);
void SERVER_DISPATCH_APIENTRY crServerDispatchBarrierCreateCR(GLuint name, GLuint count);
void SERVER_DISPATCH_APIENTRY crServerDispatchBarrierDestroyCR(GLuint name);
void SERVER_DISPATCH_APIENTRY crServerDispatchBarrierExecCR(GLuint name);
void SERVER_DISPATCH_APIENTRY crServerDispatchBegin(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchBeginQueryARB(GLenum target, GLuint id);
void SERVER_DISPATCH_APIENTRY crServerDispatchBindAttribLocation(GLuint program, GLuint index, const char * name);
void SERVER_DISPATCH_APIENTRY crServerDispatchBindBufferARB(GLenum target, GLuint buffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchBindFramebufferEXT(GLenum target, GLuint framebuffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchBindProgramARB(GLenum target, GLuint program);
void SERVER_DISPATCH_APIENTRY crServerDispatchBindProgramNV(GLenum target, GLuint id);
void SERVER_DISPATCH_APIENTRY crServerDispatchBindRenderbufferEXT(GLenum target, GLuint renderbuffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchBindTexture(GLenum target, GLuint texture);
void SERVER_DISPATCH_APIENTRY crServerDispatchBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
void SERVER_DISPATCH_APIENTRY crServerDispatchBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchBlendEquationEXT(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchBlendFunc(GLenum sfactor, GLenum dfactor);
void SERVER_DISPATCH_APIENTRY crServerDispatchBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorA, GLenum dfactorA);
void SERVER_DISPATCH_APIENTRY crServerDispatchBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void SERVER_DISPATCH_APIENTRY crServerDispatchBoundsInfoCR(const CRrecti * bounds, const GLbyte * payload, GLint len, GLint num_opcodes);
void SERVER_DISPATCH_APIENTRY crServerDispatchBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage);
void SERVER_DISPATCH_APIENTRY crServerDispatchBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchCallList(GLuint list);
void SERVER_DISPATCH_APIENTRY crServerDispatchCallLists(GLsizei n, GLenum type, const GLvoid * lists);
GLenum SERVER_DISPATCH_APIENTRY crServerDispatchCheckFramebufferStatusEXT(GLenum target);
void SERVER_DISPATCH_APIENTRY crServerDispatchChromiumParameterfCR(GLenum target, GLfloat value);
void SERVER_DISPATCH_APIENTRY crServerDispatchChromiumParameteriCR(GLenum target, GLint value);
void SERVER_DISPATCH_APIENTRY crServerDispatchChromiumParametervCR(GLenum target, GLenum type, GLsizei count, const GLvoid * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchClear(GLbitfield mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchClearDepth(GLclampd depth);
void SERVER_DISPATCH_APIENTRY crServerDispatchClearIndex(GLfloat c);
void SERVER_DISPATCH_APIENTRY crServerDispatchClearStencil(GLint s);
void SERVER_DISPATCH_APIENTRY crServerDispatchClientActiveTextureARB(GLenum texture);
void SERVER_DISPATCH_APIENTRY crServerDispatchClipPlane(GLenum plane, const GLdouble * equation);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3b(GLbyte red, GLbyte green, GLbyte blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3d(GLdouble red, GLdouble green, GLdouble blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3f(GLfloat red, GLfloat green, GLfloat blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3fv(const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3i(GLint red, GLint green, GLint blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3s(GLshort red, GLshort green, GLshort blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3ub(GLubyte red, GLubyte green, GLubyte blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3ui(GLuint red, GLuint green, GLuint blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor3us(GLushort red, GLushort green, GLushort blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4fv(const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4i(GLint red, GLint green, GLint blue, GLint alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void SERVER_DISPATCH_APIENTRY crServerDispatchColorMaterial(GLenum face, GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
void SERVER_DISPATCH_APIENTRY crServerDispatchCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
void SERVER_DISPATCH_APIENTRY crServerDispatchCombinerParameterfNV(GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchCombinerParameterfvNV(GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchCombinerParameteriNV(GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchCombinerParameterivNV(GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchCompileShader(GLuint shader);
void SERVER_DISPATCH_APIENTRY crServerDispatchCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imagesize, const GLvoid * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imagesize, const GLvoid * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imagesize, const GLvoid * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchCopyTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void SERVER_DISPATCH_APIENTRY crServerDispatchCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLint SERVER_DISPATCH_APIENTRY crServerDispatchCreateContext(const char * dpyName, GLint visual, GLint shareCtx);
GLuint SERVER_DISPATCH_APIENTRY crServerDispatchCreateProgram(void);
GLuint SERVER_DISPATCH_APIENTRY crServerDispatchCreateShader(GLenum type);
void SERVER_DISPATCH_APIENTRY crServerDispatchCullFace(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteBuffersARB(GLsizei n, const GLuint * buffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteFencesNV(GLsizei n, const GLuint * fences);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteLists(GLuint list, GLsizei range);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteObjectARB(VBoxGLhandleARB obj);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteProgram(GLuint program);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteProgramsARB(GLsizei n, const GLuint * programs);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteQueriesARB(GLsizei n, const GLuint * ids);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteShader(GLuint shader);
void SERVER_DISPATCH_APIENTRY crServerDispatchDeleteTextures(GLsizei n, const GLuint * textures);
void SERVER_DISPATCH_APIENTRY crServerDispatchDepthFunc(GLenum func);
void SERVER_DISPATCH_APIENTRY crServerDispatchDepthMask(GLboolean flag);
void SERVER_DISPATCH_APIENTRY crServerDispatchDepthRange(GLclampd zNear, GLclampd zFar);
void SERVER_DISPATCH_APIENTRY crServerDispatchDestroyContext(GLint ctx);
void SERVER_DISPATCH_APIENTRY crServerDispatchDetachShader(GLuint program, GLuint shader);
void SERVER_DISPATCH_APIENTRY crServerDispatchDisable(GLenum cap);
void SERVER_DISPATCH_APIENTRY crServerDispatchDisableClientState(GLenum array);
void SERVER_DISPATCH_APIENTRY crServerDispatchDisableVertexAttribArrayARB(GLuint index);
void SERVER_DISPATCH_APIENTRY crServerDispatchDrawArrays(GLenum mode, GLint first, GLsizei count);
void SERVER_DISPATCH_APIENTRY crServerDispatchDrawBuffer(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchDrawBuffers(GLsizei n, const GLenum* bufs);
void SERVER_DISPATCH_APIENTRY crServerDispatchDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);
void SERVER_DISPATCH_APIENTRY crServerDispatchEdgeFlag(GLboolean flag);
void SERVER_DISPATCH_APIENTRY crServerDispatchEdgeFlagPointer(GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchEnable(GLenum cap);
void SERVER_DISPATCH_APIENTRY crServerDispatchEnableClientState(GLenum array);
void SERVER_DISPATCH_APIENTRY crServerDispatchEnableVertexAttribArrayARB(GLuint index);
void SERVER_DISPATCH_APIENTRY crServerDispatchEnd(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchEndList(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchEndQueryARB(GLenum target);
void SERVER_DISPATCH_APIENTRY crServerDispatchExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
void SERVER_DISPATCH_APIENTRY crServerDispatchFinish(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchFinishFenceNV(GLuint fence);
void SERVER_DISPATCH_APIENTRY crServerDispatchFlush(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchFlushVertexArrayRangeNV(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchFogCoorddEXT(GLdouble coord);
void SERVER_DISPATCH_APIENTRY crServerDispatchFogCoordfEXT(GLfloat coord);
void SERVER_DISPATCH_APIENTRY crServerDispatchFogf(GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchFogfv(GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchFogi(GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchFogiv(GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void SERVER_DISPATCH_APIENTRY crServerDispatchFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void SERVER_DISPATCH_APIENTRY crServerDispatchFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void SERVER_DISPATCH_APIENTRY crServerDispatchFrontFace(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenBuffersARB(GLsizei n, GLuint * buffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenFencesNV(GLsizei n, GLuint * fences);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenFramebuffersEXT(GLsizei n, GLuint * framebuffers);
GLuint SERVER_DISPATCH_APIENTRY crServerDispatchGenLists(GLsizei range);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenProgramsARB(GLsizei n, GLuint * programs);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenProgramsNV(GLsizei n, GLuint * ids);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenQueriesARB(GLsizei n, GLuint * ids);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenTextures(GLsizei n, GLuint * textures);
void SERVER_DISPATCH_APIENTRY crServerDispatchGenerateMipmapEXT(GLenum target);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, char * name);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, char * name);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetAttachedObjectsARB(VBoxGLhandleARB containerObj, GLsizei maxCount, GLsizei * count, VBoxGLhandleARB * obj);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
GLint SERVER_DISPATCH_APIENTRY crServerDispatchGetAttribLocation(GLuint program, const char * name);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetAttribsLocations(GLuint program, GLsizei maxcbData, GLsizei * cbData, GLvoid * pData);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetBooleanv(GLenum pname, GLboolean * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetBufferPointervARB(GLenum target, GLenum pname, GLvoid ** params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetChromiumParametervCR(GLenum target, GLuint index, GLenum type, GLsizei count, GLvoid * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetClipPlane(GLenum plane, GLdouble * equation);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetCompressedTexImageARB(GLenum target, GLint level, GLvoid * img);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetDoublev(GLenum pname, GLdouble * params);
GLenum SERVER_DISPATCH_APIENTRY crServerDispatchGetError(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetFenceivNV(GLuint fence, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetFloatv(GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params);
VBoxGLhandleARB SERVER_DISPATCH_APIENTRY crServerDispatchGetHandleARB(GLenum pname);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetInfoLogARB(VBoxGLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetIntegerv(GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetLightfv(GLenum light, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetLightiv(GLenum light, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetMapdv(GLenum target, GLenum query, GLdouble * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetMapfv(GLenum target, GLenum query, GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetMapiv(GLenum target, GLenum query, GLint * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetMaterialfv(GLenum face, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetMaterialiv(GLenum face, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetObjectParameterfvARB(VBoxGLhandleARB obj, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetObjectParameterivARB(VBoxGLhandleARB obj, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetPixelMapfv(GLenum map, GLfloat * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetPixelMapuiv(GLenum map, GLuint * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetPixelMapusv(GLenum map, GLushort * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetPointerv(GLenum pname, GLvoid ** params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetPolygonStipple(GLubyte * mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, char * infoLog);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramStringARB(GLenum target, GLenum pname, GLvoid * string);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramiv(GLuint program, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramivARB(GLenum target, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetProgramivNV(GLuint id, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetQueryivARB(GLenum target, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, char * infoLog);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, char * source);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetShaderiv(GLuint shader, GLenum pname, GLint * params);
const GLubyte * SERVER_DISPATCH_APIENTRY crServerDispatchGetString(GLenum name);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexEnviv(GLenum target, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexGendv(GLenum coord, GLenum pname, GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexGeniv(GLenum coord, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTexParameteriv(GLenum target, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params);
GLint SERVER_DISPATCH_APIENTRY crServerDispatchGetUniformLocation(GLuint program, const char * name);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetUniformfv(GLuint program, GLint location, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetUniformiv(GLuint program, GLint location, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetUniformsLocations(GLuint program, GLsizei maxcbData, GLsizei * cbData, GLvoid * pData);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid ** pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid ** pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchHint(GLenum target, GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchIndexMask(GLuint mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchIndexPointer(GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchIndexd(GLdouble c);
void SERVER_DISPATCH_APIENTRY crServerDispatchIndexf(GLfloat c);
void SERVER_DISPATCH_APIENTRY crServerDispatchIndexi(GLint c);
void SERVER_DISPATCH_APIENTRY crServerDispatchIndexs(GLshort c);
void SERVER_DISPATCH_APIENTRY crServerDispatchIndexub(GLubyte c);
void SERVER_DISPATCH_APIENTRY crServerDispatchInitNames(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchInterleavedArrays(GLenum format, GLsizei stride, const GLvoid * pointer);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsBufferARB(GLuint buffer);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsEnabled(GLenum cap);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsFenceNV(GLuint fence);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsFramebufferEXT(GLuint framebuffer);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsList(GLuint list);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsProgram(GLuint program);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsProgramARB(GLuint program);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsQueryARB(GLuint id);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsRenderbufferEXT(GLuint renderbuffer);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsShader(GLuint shader);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchIsTexture(GLuint texture);
void SERVER_DISPATCH_APIENTRY crServerDispatchLightModelf(GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchLightModelfv(GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchLightModeli(GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchLightModeliv(GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchLightf(GLenum light, GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchLightfv(GLenum light, GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchLighti(GLenum light, GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchLightiv(GLenum light, GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchLineStipple(GLint factor, GLushort pattern);
void SERVER_DISPATCH_APIENTRY crServerDispatchLineWidth(GLfloat width);
void SERVER_DISPATCH_APIENTRY crServerDispatchLinkProgram(GLuint program);
void SERVER_DISPATCH_APIENTRY crServerDispatchListBase(GLuint base);
void SERVER_DISPATCH_APIENTRY crServerDispatchLoadIdentity(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchLoadMatrixd(const GLdouble * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchLoadMatrixf(const GLfloat * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchLoadName(GLuint name);
void SERVER_DISPATCH_APIENTRY crServerDispatchLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program);
void SERVER_DISPATCH_APIENTRY crServerDispatchLoadTransposeMatrixdARB(const GLdouble * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchLoadTransposeMatrixfARB(const GLfloat * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchLockArraysEXT(GLint first, GLint count);
void SERVER_DISPATCH_APIENTRY crServerDispatchLogicOp(GLenum opcode);
void SERVER_DISPATCH_APIENTRY crServerDispatchMakeCurrent(GLint window, GLint nativeWindow, GLint ctx);
void SERVER_DISPATCH_APIENTRY crServerDispatchMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
void SERVER_DISPATCH_APIENTRY crServerDispatchMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
void SERVER_DISPATCH_APIENTRY crServerDispatchMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
void SERVER_DISPATCH_APIENTRY crServerDispatchMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
void * SERVER_DISPATCH_APIENTRY crServerDispatchMapBufferARB(GLenum target, GLenum access);
void SERVER_DISPATCH_APIENTRY crServerDispatchMapGrid1d(GLint un, GLdouble u1, GLdouble u2);
void SERVER_DISPATCH_APIENTRY crServerDispatchMapGrid1f(GLint un, GLfloat u1, GLfloat u2);
void SERVER_DISPATCH_APIENTRY crServerDispatchMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void SERVER_DISPATCH_APIENTRY crServerDispatchMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void SERVER_DISPATCH_APIENTRY crServerDispatchMaterialf(GLenum face, GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchMaterialfv(GLenum face, GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchMateriali(GLenum face, GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchMaterialiv(GLenum face, GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchMatrixMode(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultMatrixd(const GLdouble * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultMatrixf(const GLfloat * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultTransposeMatrixdARB(const GLdouble * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultTransposeMatrixfARB(const GLfloat * m);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord1dARB(GLenum texture, GLdouble s);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord1fARB(GLenum texture, GLfloat s);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord1iARB(GLenum texture, GLint s);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord1sARB(GLenum texture, GLshort s);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord2dARB(GLenum texture, GLdouble s, GLdouble t);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord2fARB(GLenum texture, GLfloat s, GLfloat t);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord2iARB(GLenum texture, GLint s, GLint t);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord2sARB(GLenum texture, GLshort s, GLshort t);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord3dARB(GLenum texture, GLdouble s, GLdouble t, GLdouble r);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord3fARB(GLenum texture, GLfloat s, GLfloat t, GLfloat r);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord3iARB(GLenum texture, GLint s, GLint t, GLint r);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord3sARB(GLenum texture, GLshort s, GLshort t, GLshort r);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord4dARB(GLenum texture, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord4fARB(GLenum texture, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord4iARB(GLenum texture, GLint s, GLint t, GLint r, GLint q);
void SERVER_DISPATCH_APIENTRY crServerDispatchMultiTexCoord4sARB(GLenum texture, GLshort s, GLshort t, GLshort r, GLshort q);
void SERVER_DISPATCH_APIENTRY crServerDispatchNewList(GLuint list, GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchNormal3b(GLbyte nx, GLbyte ny, GLbyte nz);
void SERVER_DISPATCH_APIENTRY crServerDispatchNormal3d(GLdouble nx, GLdouble ny, GLdouble nz);
void SERVER_DISPATCH_APIENTRY crServerDispatchNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
void SERVER_DISPATCH_APIENTRY crServerDispatchNormal3i(GLint nx, GLint ny, GLint nz);
void SERVER_DISPATCH_APIENTRY crServerDispatchNormal3s(GLshort nx, GLshort ny, GLshort nz);
void SERVER_DISPATCH_APIENTRY crServerDispatchNormalPointer(GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void SERVER_DISPATCH_APIENTRY crServerDispatchPassThrough(GLfloat token);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelStoref(GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelStorei(GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelTransferf(GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelTransferi(GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchPixelZoom(GLfloat xfactor, GLfloat yfactor);
void SERVER_DISPATCH_APIENTRY crServerDispatchPointParameterfARB(GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchPointParameterfvARB(GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchPointParameteri(GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchPointParameteriv(GLenum pname, const GLint * param);
void SERVER_DISPATCH_APIENTRY crServerDispatchPointSize(GLfloat size);
void SERVER_DISPATCH_APIENTRY crServerDispatchPolygonMode(GLenum face, GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchPolygonOffset(GLfloat factor, GLfloat units);
void SERVER_DISPATCH_APIENTRY crServerDispatchPolygonStipple(const GLubyte * mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchPopAttrib(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchPopClientAttrib(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchPopMatrix(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchPopName(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchPrioritizeTextures(GLsizei n, const GLuint * textures, const GLclampf * priorities);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid * string);
void SERVER_DISPATCH_APIENTRY crServerDispatchPushAttrib(GLbitfield mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchPushClientAttrib(GLbitfield mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchPushMatrix(void);
void SERVER_DISPATCH_APIENTRY crServerDispatchPushName(GLuint name);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2d(GLdouble x, GLdouble y);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2dv(const GLdouble * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2f(GLfloat x, GLfloat y);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2fv(const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2i(GLint x, GLint y);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2iv(const GLint * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2s(GLshort x, GLshort y);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos2sv(const GLshort * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3dv(const GLdouble * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3fv(const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3i(GLint x, GLint y, GLint z);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3iv(const GLint * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3s(GLshort x, GLshort y, GLshort z);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos3sv(const GLshort * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4dv(const GLdouble * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4fv(const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4i(GLint x, GLint y, GLint z, GLint w);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4iv(const GLint * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
void SERVER_DISPATCH_APIENTRY crServerDispatchRasterPos4sv(const GLshort * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchReadBuffer(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels);
GLint SERVER_DISPATCH_APIENTRY crServerDispatchRenderMode(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void SERVER_DISPATCH_APIENTRY crServerDispatchRequestResidentProgramsNV(GLsizei n, const GLuint * ids);
void SERVER_DISPATCH_APIENTRY crServerDispatchRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void SERVER_DISPATCH_APIENTRY crServerDispatchRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void SERVER_DISPATCH_APIENTRY crServerDispatchSampleCoverageARB(GLclampf value, GLboolean invert);
void SERVER_DISPATCH_APIENTRY crServerDispatchScaled(GLdouble x, GLdouble y, GLdouble z);
void SERVER_DISPATCH_APIENTRY crServerDispatchScalef(GLfloat x, GLfloat y, GLfloat z);
void SERVER_DISPATCH_APIENTRY crServerDispatchScissor(GLint x, GLint y, GLsizei width, GLsizei height);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3iEXT(GLint red, GLint green, GLint blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
void SERVER_DISPATCH_APIENTRY crServerDispatchSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchSelectBuffer(GLsizei size, GLuint * buffer);
void SERVER_DISPATCH_APIENTRY crServerDispatchSemaphoreCreateCR(GLuint name, GLuint count);
void SERVER_DISPATCH_APIENTRY crServerDispatchSemaphoreDestroyCR(GLuint name);
void SERVER_DISPATCH_APIENTRY crServerDispatchSemaphorePCR(GLuint name);
void SERVER_DISPATCH_APIENTRY crServerDispatchSemaphoreVCR(GLuint name);
void SERVER_DISPATCH_APIENTRY crServerDispatchSetFenceNV(GLuint fence, GLenum condition);
void SERVER_DISPATCH_APIENTRY crServerDispatchShadeModel(GLenum mode);
void SERVER_DISPATCH_APIENTRY crServerDispatchShaderSource(GLuint shader, GLsizei count, const char ** string, const GLint * length);
void SERVER_DISPATCH_APIENTRY crServerDispatchStencilFunc(GLenum func, GLint ref, GLuint mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchStencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchStencilMask(GLuint mask);
void SERVER_DISPATCH_APIENTRY crServerDispatchStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
void SERVER_DISPATCH_APIENTRY crServerDispatchStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
void SERVER_DISPATCH_APIENTRY crServerDispatchSwapBuffers(GLint window, GLint flags);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchTestFenceNV(GLuint fence);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord1d(GLdouble s);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord1f(GLfloat s);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord1i(GLint s);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord1s(GLshort s);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord2d(GLdouble s, GLdouble t);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord2f(GLfloat s, GLfloat t);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord2i(GLint s, GLint t);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord2s(GLshort s, GLshort t);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord3i(GLint s, GLint t, GLint r);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord3s(GLshort s, GLshort t, GLshort r);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord4i(GLint s, GLint t, GLint r, GLint q);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexEnvf(GLenum target, GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexEnvfv(GLenum target, GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexEnvi(GLenum target, GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexEnviv(GLenum target, GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexGend(GLenum coord, GLenum pname, GLdouble param);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexGendv(GLenum coord, GLenum pname, const GLdouble * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexGenf(GLenum coord, GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexGenfv(GLenum coord, GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexGeni(GLenum coord, GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexGeniv(GLenum coord, GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexImage3DEXT(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexParameterf(GLenum target, GLenum pname, GLfloat param);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexParameterfv(GLenum target, GLenum pname, const GLfloat * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexParameteri(GLenum target, GLenum pname, GLint param);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexParameteriv(GLenum target, GLenum pname, const GLint * params);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
void SERVER_DISPATCH_APIENTRY crServerDispatchTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
void SERVER_DISPATCH_APIENTRY crServerDispatchTranslated(GLdouble x, GLdouble y, GLdouble z);
void SERVER_DISPATCH_APIENTRY crServerDispatchTranslatef(GLfloat x, GLfloat y, GLfloat z);
void SERVER_DISPATCH_APIENTRY crServerDispatchUnlockArraysEXT(void);
GLboolean SERVER_DISPATCH_APIENTRY crServerDispatchUnmapBufferARB(GLenum target);
void SERVER_DISPATCH_APIENTRY crServerDispatchUseProgram(GLuint program);
void SERVER_DISPATCH_APIENTRY crServerDispatchVBoxTexPresent(GLuint texture, GLuint cfg, GLint xPos, GLint yPos, GLint cRects, const GLint * pRects);
void SERVER_DISPATCH_APIENTRY crServerDispatchValidateProgram(GLuint program);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexArrayRangeNV(GLsizei length, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib1dARB(GLuint index, GLdouble x);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib1fARB(GLuint index, GLfloat x);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib1sARB(GLuint index, GLshort x);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void SERVER_DISPATCH_APIENTRY crServerDispatchViewport(GLint x, GLint y, GLsizei width, GLsizei height);
GLint SERVER_DISPATCH_APIENTRY crServerDispatchWindowCreate(const char * dpyName, GLint visBits);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowDestroy(GLint window);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2dARB(GLdouble x, GLdouble y);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2dvARB(const GLdouble * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2fARB(GLfloat x, GLfloat y);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2fvARB(const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2iARB(GLint x, GLint y);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2ivARB(const GLint * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2sARB(GLshort x, GLshort y);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos2svARB(const GLshort * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3dvARB(const GLdouble * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3fvARB(const GLfloat * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3iARB(GLint x, GLint y, GLint z);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3ivARB(const GLint * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3sARB(GLshort x, GLshort y, GLshort z);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPos3svARB(const GLshort * v);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowPosition(GLint window, GLint x, GLint y);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowShow(GLint window, GLint flag);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowSize(GLint window, GLint w, GLint h);
void SERVER_DISPATCH_APIENTRY crServerDispatchWindowVisibleRegion(GLint window, GLint cRects, const GLint * pRects);
void SERVER_DISPATCH_APIENTRY crServerDispatchWriteback(GLint * writeback);

#if defined(__cplusplus)
}
#endif

#endif /* SERVER_DISPATCH_HEADER */

