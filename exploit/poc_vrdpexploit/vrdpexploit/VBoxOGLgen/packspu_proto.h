/* Copyright (c) 2001, Stanford University
	All rights reserved.

	See the file LICENSE.txt for information on redistributing this software. */
	

/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY packspu_proto.py SCRIPT */

#ifndef PACKSPU_FUNCTIONS_H
#define PACKSPU_FUNCTIONS_H 1

#include <stdio.h>
#include "cr_string.h"
#include "cr_spu.h"
#include "packspu.h"
#include "cr_packfunctions.h"

extern void PACKSPU_APIENTRY packspu_ActiveTextureARB(GLenum texture);
extern GLboolean PACKSPU_APIENTRY packspu_AreProgramsResidentNV(GLsizei n, const GLuint * ids, GLboolean * residences);
extern GLboolean PACKSPU_APIENTRY packspu_AreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences);
extern void PACKSPU_APIENTRY packspu_ArrayElement(GLint i);
extern void PACKSPU_APIENTRY packspu_BarrierCreateCR(GLuint name, GLuint count);
extern void PACKSPU_APIENTRY packspu_BarrierExecCR(GLuint name);
extern void PACKSPU_APIENTRY packspu_Begin(GLenum mode);
extern void PACKSPU_APIENTRY packspu_BindBufferARB(GLenum target, GLuint buffer);
extern void PACKSPU_APIENTRY packspu_BindFramebufferEXT(GLenum target, GLuint framebuffer);
extern void PACKSPU_APIENTRY packspu_BindRenderbufferEXT(GLenum target, GLuint renderbuffer);
extern void PACKSPU_APIENTRY packspu_BindTexture(GLenum target, GLuint texture);
extern void PACKSPU_APIENTRY packspu_Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
extern void PACKSPU_APIENTRY packspu_BufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage);
extern void PACKSPU_APIENTRY packspu_BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid * data);
extern GLenum PACKSPU_APIENTRY packspu_CheckFramebufferStatusEXT(GLenum target);
extern void PACKSPU_APIENTRY packspu_ChromiumParameteriCR(GLenum target, GLint value);
extern void PACKSPU_APIENTRY packspu_ChromiumParametervCR(GLenum target, GLenum type, GLsizei count, const GLvoid * values);
extern void PACKSPU_APIENTRY packspu_ClientActiveTextureARB(GLenum texture);
extern void PACKSPU_APIENTRY packspu_ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_CompileShader(GLuint shader);
extern void PACKSPU_APIENTRY packspu_CompressedTexImage1DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data);
extern void PACKSPU_APIENTRY packspu_CompressedTexImage2DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data);
extern void PACKSPU_APIENTRY packspu_CompressedTexImage3DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data);
extern void PACKSPU_APIENTRY packspu_CompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imagesize, const GLvoid * data);
extern void PACKSPU_APIENTRY packspu_CompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imagesize, const GLvoid * data);
extern void PACKSPU_APIENTRY packspu_CompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imagesize, const GLvoid * data);
extern void PACKSPU_APIENTRY packspu_CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
extern GLint PACKSPU_APIENTRY packspu_CreateContext(const char * dpyName, GLint visual, GLint shareCtx);
extern GLuint PACKSPU_APIENTRY packspu_CreateProgram(void);
extern GLuint PACKSPU_APIENTRY packspu_CreateShader(GLenum type);
extern void PACKSPU_APIENTRY packspu_DeleteBuffersARB(GLsizei n, const GLuint * buffer);
extern void PACKSPU_APIENTRY packspu_DeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers);
extern void PACKSPU_APIENTRY packspu_DeleteObjectARB(VBoxGLhandleARB obj);
extern void PACKSPU_APIENTRY packspu_DeleteProgram(GLuint program);
extern void PACKSPU_APIENTRY packspu_DeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers);
extern void PACKSPU_APIENTRY packspu_DeleteTextures(GLsizei n, const GLuint * textures);
extern void PACKSPU_APIENTRY packspu_DestroyContext(GLint ctx);
extern void PACKSPU_APIENTRY packspu_Disable(GLenum cap);
extern void PACKSPU_APIENTRY packspu_DisableClientState(GLenum array);
extern void PACKSPU_APIENTRY packspu_DisableVertexAttribArrayARB(GLuint index);
extern void PACKSPU_APIENTRY packspu_DrawArrays(GLenum mode, GLint first, GLsizei count);
extern void PACKSPU_APIENTRY packspu_DrawBuffer(GLenum mode);
extern void PACKSPU_APIENTRY packspu_DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);
extern void PACKSPU_APIENTRY packspu_DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices);
extern void PACKSPU_APIENTRY packspu_EdgeFlagPointer(GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_Enable(GLenum cap);
extern void PACKSPU_APIENTRY packspu_EnableClientState(GLenum array);
extern void PACKSPU_APIENTRY packspu_EnableVertexAttribArrayARB(GLuint index);
extern void PACKSPU_APIENTRY packspu_End(void);
extern void PACKSPU_APIENTRY packspu_EndList(void);
extern void PACKSPU_APIENTRY packspu_Finish(void);
extern void PACKSPU_APIENTRY packspu_Flush(void);
extern void PACKSPU_APIENTRY packspu_FogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_FramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern void PACKSPU_APIENTRY packspu_FramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern void PACKSPU_APIENTRY packspu_FramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern void PACKSPU_APIENTRY packspu_FramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern void PACKSPU_APIENTRY packspu_GenBuffersARB(GLsizei n, GLuint * buffer);
extern void PACKSPU_APIENTRY packspu_GenFencesNV(GLsizei n, GLuint * fences);
extern void PACKSPU_APIENTRY packspu_GenFramebuffersEXT(GLsizei n, GLuint * framebuffers);
extern GLuint PACKSPU_APIENTRY packspu_GenLists(GLsizei range);
extern void PACKSPU_APIENTRY packspu_GenProgramsARB(GLsizei n, GLuint * programs);
extern void PACKSPU_APIENTRY packspu_GenProgramsNV(GLsizei n, GLuint * ids);
extern void PACKSPU_APIENTRY packspu_GenQueriesARB(GLsizei n, GLuint * ids);
extern void PACKSPU_APIENTRY packspu_GenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers);
extern void PACKSPU_APIENTRY packspu_GenTextures(GLsizei n, GLuint * textures);
extern void PACKSPU_APIENTRY packspu_GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, char * name);
extern void PACKSPU_APIENTRY packspu_GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, char * name);
extern void PACKSPU_APIENTRY packspu_GetAttachedObjectsARB(VBoxGLhandleARB containerObj, GLsizei maxCount, GLsizei * count, VBoxGLhandleARB * obj);
extern void PACKSPU_APIENTRY packspu_GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
extern GLint PACKSPU_APIENTRY packspu_GetAttribLocation(GLuint program, const char * name);
extern void PACKSPU_APIENTRY packspu_GetAttribsLocations(GLuint program, GLsizei maxcbData, GLsizei * cbData, GLvoid * pData);
extern void PACKSPU_APIENTRY packspu_GetBooleanv(GLenum pname, GLboolean * params);
extern void PACKSPU_APIENTRY packspu_GetBufferParameterivARB(GLenum target, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetBufferPointervARB(GLenum target, GLenum pname, GLvoid ** params);
extern void PACKSPU_APIENTRY packspu_GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
extern void PACKSPU_APIENTRY packspu_GetChromiumParametervCR(GLenum target, GLuint index, GLenum type, GLsizei count, GLvoid * values);
extern void PACKSPU_APIENTRY packspu_GetClipPlane(GLenum plane, GLdouble * equation);
extern void PACKSPU_APIENTRY packspu_GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetCompressedTexImageARB(GLenum target, GLint level, GLvoid * img);
extern void PACKSPU_APIENTRY packspu_GetDoublev(GLenum pname, GLdouble * params);
extern GLenum PACKSPU_APIENTRY packspu_GetError(void);
extern void PACKSPU_APIENTRY packspu_GetFenceivNV(GLuint fence, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetFloatv(GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params);
extern VBoxGLhandleARB PACKSPU_APIENTRY packspu_GetHandleARB(GLenum pname);
extern void PACKSPU_APIENTRY packspu_GetInfoLogARB(VBoxGLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
extern void PACKSPU_APIENTRY packspu_GetIntegerv(GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetLightfv(GLenum light, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetLightiv(GLenum light, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetMapdv(GLenum target, GLenum query, GLdouble * v);
extern void PACKSPU_APIENTRY packspu_GetMapfv(GLenum target, GLenum query, GLfloat * v);
extern void PACKSPU_APIENTRY packspu_GetMapiv(GLenum target, GLenum query, GLint * v);
extern void PACKSPU_APIENTRY packspu_GetMaterialfv(GLenum face, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetMaterialiv(GLenum face, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetObjectParameterfvARB(VBoxGLhandleARB obj, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetObjectParameterivARB(VBoxGLhandleARB obj, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetPixelMapfv(GLenum map, GLfloat * values);
extern void PACKSPU_APIENTRY packspu_GetPixelMapuiv(GLenum map, GLuint * values);
extern void PACKSPU_APIENTRY packspu_GetPixelMapusv(GLenum map, GLushort * values);
extern void PACKSPU_APIENTRY packspu_GetPointerv(GLenum pname, GLvoid ** params);
extern void PACKSPU_APIENTRY packspu_GetPolygonStipple(GLubyte * mask);
extern void PACKSPU_APIENTRY packspu_GetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params);
extern void PACKSPU_APIENTRY packspu_GetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, char * infoLog);
extern void PACKSPU_APIENTRY packspu_GetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params);
extern void PACKSPU_APIENTRY packspu_GetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params);
extern void PACKSPU_APIENTRY packspu_GetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params);
extern void PACKSPU_APIENTRY packspu_GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetProgramStringARB(GLenum target, GLenum pname, GLvoid * string);
extern void PACKSPU_APIENTRY packspu_GetProgramStringNV(GLuint id, GLenum pname, GLubyte * program);
extern void PACKSPU_APIENTRY packspu_GetProgramiv(GLuint program, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetProgramivARB(GLenum target, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetProgramivNV(GLuint id, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetQueryObjectivARB(GLuint id, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params);
extern void PACKSPU_APIENTRY packspu_GetQueryivARB(GLenum target, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, char * infoLog);
extern void PACKSPU_APIENTRY packspu_GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, char * source);
extern void PACKSPU_APIENTRY packspu_GetShaderiv(GLuint shader, GLenum pname, GLint * params);
extern const GLubyte * PACKSPU_APIENTRY packspu_GetString(GLenum name);
extern void PACKSPU_APIENTRY packspu_GetTexEnvfv(GLenum target, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetTexEnviv(GLenum target, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetTexGendv(GLenum coord, GLenum pname, GLdouble * params);
extern void PACKSPU_APIENTRY packspu_GetTexGenfv(GLenum coord, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetTexGeniv(GLenum coord, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetTexParameterfv(GLenum target, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetTexParameteriv(GLenum target, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params);
extern GLint PACKSPU_APIENTRY packspu_GetUniformLocation(GLuint program, const char * name);
extern void PACKSPU_APIENTRY packspu_GetUniformfv(GLuint program, GLint location, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetUniformiv(GLuint program, GLint location, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetUniformsLocations(GLuint program, GLsizei maxcbData, GLsizei * cbData, GLvoid * pData);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid ** pointer);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid ** pointer);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribivARB(GLuint index, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_GetVertexAttribivNV(GLuint index, GLenum pname, GLint * params);
extern void PACKSPU_APIENTRY packspu_IndexPointer(GLenum type, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_InterleavedArrays(GLenum format, GLsizei stride, const GLvoid * pointer);
extern GLboolean PACKSPU_APIENTRY packspu_IsBufferARB(GLuint buffer);
extern GLboolean PACKSPU_APIENTRY packspu_IsEnabled(GLenum cap);
extern GLboolean PACKSPU_APIENTRY packspu_IsFenceNV(GLuint fence);
extern GLboolean PACKSPU_APIENTRY packspu_IsFramebufferEXT(GLuint framebuffer);
extern GLboolean PACKSPU_APIENTRY packspu_IsList(GLuint list);
extern GLboolean PACKSPU_APIENTRY packspu_IsProgram(GLuint program);
extern GLboolean PACKSPU_APIENTRY packspu_IsProgramARB(GLuint program);
extern GLboolean PACKSPU_APIENTRY packspu_IsQueryARB(GLuint id);
extern GLboolean PACKSPU_APIENTRY packspu_IsRenderbufferEXT(GLuint renderbuffer);
extern GLboolean PACKSPU_APIENTRY packspu_IsShader(GLuint shader);
extern GLboolean PACKSPU_APIENTRY packspu_IsTexture(GLuint texture);
extern void PACKSPU_APIENTRY packspu_LinkProgram(GLuint program);
extern void PACKSPU_APIENTRY packspu_LockArraysEXT(GLint first, GLint count);
extern void PACKSPU_APIENTRY packspu_MakeCurrent(GLint window, GLint nativeWindow, GLint ctx);
extern void * PACKSPU_APIENTRY packspu_MapBufferARB(GLenum target, GLenum access);
extern void PACKSPU_APIENTRY packspu_MultiDrawArraysEXT(GLenum mode, GLint * first, GLsizei * count, GLsizei primcount);
extern void PACKSPU_APIENTRY packspu_MultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const GLvoid ** indices, GLsizei primcount);
extern void PACKSPU_APIENTRY packspu_NewList(GLuint list, GLenum mode);
extern void PACKSPU_APIENTRY packspu_NormalPointer(GLenum type, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_PixelStoref(GLenum pname, GLfloat param);
extern void PACKSPU_APIENTRY packspu_PixelStorei(GLenum pname, GLint param);
extern void PACKSPU_APIENTRY packspu_PopClientAttrib(void);
extern void PACKSPU_APIENTRY packspu_PushClientAttrib(GLbitfield mask);
extern void PACKSPU_APIENTRY packspu_ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels);
extern GLint PACKSPU_APIENTRY packspu_RenderMode(GLenum mode);
extern void PACKSPU_APIENTRY packspu_SecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_SemaphoreCreateCR(GLuint name, GLuint count);
extern void PACKSPU_APIENTRY packspu_SemaphorePCR(GLuint name);
extern void PACKSPU_APIENTRY packspu_SemaphoreVCR(GLuint name);
extern void PACKSPU_APIENTRY packspu_StringMarkerGREMEDY(GLsizei len, const GLvoid* string);
extern void PACKSPU_APIENTRY packspu_SwapBuffers(GLint window, GLint flags);
extern GLboolean PACKSPU_APIENTRY packspu_TestFenceNV(GLuint fence);
extern void PACKSPU_APIENTRY packspu_TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_TexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_TexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_TexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_TexImage3DEXT(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
extern void PACKSPU_APIENTRY packspu_UnlockArraysEXT(void);
extern GLboolean PACKSPU_APIENTRY packspu_UnmapBufferARB(GLenum target);
extern void PACKSPU_APIENTRY packspu_VBoxAttachThread(void);
extern void PACKSPU_APIENTRY packspu_VBoxConChromiumParameteriCR(GLint con, GLenum target, GLint value);
extern void PACKSPU_APIENTRY packspu_VBoxConChromiumParametervCR(GLint con, GLenum target, GLenum type, GLsizei count, const GLvoid * values);
extern GLint PACKSPU_APIENTRY packspu_VBoxConCreate(struct VBOXUHGSMI * pHgsmi);
extern void PACKSPU_APIENTRY packspu_VBoxConDestroy(GLint con);
extern void PACKSPU_APIENTRY packspu_VBoxConFlush(GLint con);
extern GLint PACKSPU_APIENTRY packspu_VBoxCreateContext(GLint con, const char * dpyName, GLint visual, GLint shareCtx);
extern void PACKSPU_APIENTRY packspu_VBoxDetachThread(void);
extern GLuint PACKSPU_APIENTRY packspu_VBoxPackGetInjectID(GLint con);
extern void PACKSPU_APIENTRY packspu_VBoxPackSetInjectID(GLuint id);
extern GLint PACKSPU_APIENTRY packspu_VBoxPackSetInjectThread(struct VBOXUHGSMI * pHgsmi);
extern void PACKSPU_APIENTRY packspu_VBoxPresentComposition(GLint win, const struct VBOXVR_SCR_COMPOSITOR * pCompositor, const struct VBOXVR_SCR_COMPOSITOR_ENTRY * pChangedEntry);
extern GLint PACKSPU_APIENTRY packspu_VBoxWindowCreate(GLint con, const char * dpyName, GLint visBits);
extern void PACKSPU_APIENTRY packspu_VBoxWindowDestroy(GLint con, GLint window);
extern void PACKSPU_APIENTRY packspu_Vertex2d(GLdouble x, GLdouble y);
extern void PACKSPU_APIENTRY packspu_Vertex2dv(const GLdouble * v);
extern void PACKSPU_APIENTRY packspu_Vertex2f(GLfloat x, GLfloat y);
extern void PACKSPU_APIENTRY packspu_Vertex2fv(const GLfloat * v);
extern void PACKSPU_APIENTRY packspu_Vertex2i(GLint x, GLint y);
extern void PACKSPU_APIENTRY packspu_Vertex2iv(const GLint * v);
extern void PACKSPU_APIENTRY packspu_Vertex2s(GLshort x, GLshort y);
extern void PACKSPU_APIENTRY packspu_Vertex2sv(const GLshort * v);
extern void PACKSPU_APIENTRY packspu_Vertex3d(GLdouble x, GLdouble y, GLdouble z);
extern void PACKSPU_APIENTRY packspu_Vertex3dv(const GLdouble * v);
extern void PACKSPU_APIENTRY packspu_Vertex3f(GLfloat x, GLfloat y, GLfloat z);
extern void PACKSPU_APIENTRY packspu_Vertex3fv(const GLfloat * v);
extern void PACKSPU_APIENTRY packspu_Vertex3i(GLint x, GLint y, GLint z);
extern void PACKSPU_APIENTRY packspu_Vertex3iv(const GLint * v);
extern void PACKSPU_APIENTRY packspu_Vertex3s(GLshort x, GLshort y, GLshort z);
extern void PACKSPU_APIENTRY packspu_Vertex3sv(const GLshort * v);
extern void PACKSPU_APIENTRY packspu_Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void PACKSPU_APIENTRY packspu_Vertex4dv(const GLdouble * v);
extern void PACKSPU_APIENTRY packspu_Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void PACKSPU_APIENTRY packspu_Vertex4fv(const GLfloat * v);
extern void PACKSPU_APIENTRY packspu_Vertex4i(GLint x, GLint y, GLint z, GLint w);
extern void PACKSPU_APIENTRY packspu_Vertex4iv(const GLint * v);
extern void PACKSPU_APIENTRY packspu_Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
extern void PACKSPU_APIENTRY packspu_Vertex4sv(const GLshort * v);
extern void PACKSPU_APIENTRY packspu_VertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_VertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
extern void PACKSPU_APIENTRY packspu_VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
extern GLint PACKSPU_APIENTRY packspu_WindowCreate(const char * dpyName, GLint visBits);
extern void PACKSPU_APIENTRY packspu_ZPixCR(GLsizei width, GLsizei height, GLenum format, GLenum type, GLenum ztype, GLint zparm, GLint length, const GLvoid * pixels);

#endif

