/* Copyright (c) 2001, Stanford University
	All rights reserved.

	See the file LICENSE.txt for information on redistributing this software. */
	

/* DO NOT EDIT - generated by feedback.py */

#ifndef FEEDBACKSPU_PROTO_H
#define FEEDBACKSPU_PROTO_H

#include "feedbackspu.h"


extern void FEEDBACKSPU_APIENTRY feedbackspu_ClipPlane(GLenum plane, const GLdouble * equation);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Color3f(GLfloat red, GLfloat green, GLfloat blue);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Color3fv(const GLfloat * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Color4fv(const GLfloat * v);
extern GLint FEEDBACKSPU_APIENTRY feedbackspu_CreateContext(const char * dpyName, GLint visual, GLint shareCtx);
extern void FEEDBACKSPU_APIENTRY feedbackspu_DepthRange(GLclampd zNear, GLclampd zFar);
extern void FEEDBACKSPU_APIENTRY feedbackspu_DestroyContext(GLint ctx);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern void FEEDBACKSPU_APIENTRY feedbackspu_LoadIdentity(void);
extern void FEEDBACKSPU_APIENTRY feedbackspu_LoadMatrixd(const GLdouble * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_LoadMatrixf(const GLfloat * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_LoadTransposeMatrixdARB(const GLdouble * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_LoadTransposeMatrixfARB(const GLfloat * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_MakeCurrent(GLint window, GLint nativeWindow, GLint ctx);
extern void FEEDBACKSPU_APIENTRY feedbackspu_MatrixMode(GLenum mode);
extern void FEEDBACKSPU_APIENTRY feedbackspu_MultMatrixd(const GLdouble * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_MultMatrixf(const GLfloat * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_MultTransposeMatrixdARB(const GLdouble * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_MultTransposeMatrixfARB(const GLfloat * m);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern void FEEDBACKSPU_APIENTRY feedbackspu_PassThrough(GLfloat token);
extern void FEEDBACKSPU_APIENTRY feedbackspu_PolygonMode(GLenum face, GLenum mode);
extern void FEEDBACKSPU_APIENTRY feedbackspu_PopAttrib(void);
extern void FEEDBACKSPU_APIENTRY feedbackspu_PopMatrix(void);
extern void FEEDBACKSPU_APIENTRY feedbackspu_PushAttrib(GLbitfield mask);
extern void FEEDBACKSPU_APIENTRY feedbackspu_PushMatrix(void);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2d(GLdouble x, GLdouble y);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2dv(const GLdouble * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2f(GLfloat x, GLfloat y);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2fv(const GLfloat * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2i(GLint x, GLint y);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2iv(const GLint * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2s(GLshort x, GLshort y);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos2sv(const GLshort * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3dv(const GLdouble * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3fv(const GLfloat * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3i(GLint x, GLint y, GLint z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3iv(const GLint * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3s(GLshort x, GLshort y, GLshort z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos3sv(const GLshort * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4dv(const GLdouble * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4fv(const GLfloat * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4i(GLint x, GLint y, GLint z, GLint w);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4iv(const GLint * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
extern void FEEDBACKSPU_APIENTRY feedbackspu_RasterPos4sv(const GLshort * v);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Scaled(GLdouble x, GLdouble y, GLdouble z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Scalef(GLfloat x, GLfloat y, GLfloat z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Translated(GLdouble x, GLdouble y, GLdouble z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Translatef(GLfloat x, GLfloat y, GLfloat z);
extern void FEEDBACKSPU_APIENTRY feedbackspu_VBoxAttachThread(void);
extern GLint FEEDBACKSPU_APIENTRY feedbackspu_VBoxCreateContext(GLint con, const char * dpyName, GLint visual, GLint shareCtx);
extern void FEEDBACKSPU_APIENTRY feedbackspu_VBoxDetachThread(void);
extern void FEEDBACKSPU_APIENTRY feedbackspu_Viewport(GLint x, GLint y, GLsizei width, GLsizei height);

#endif

